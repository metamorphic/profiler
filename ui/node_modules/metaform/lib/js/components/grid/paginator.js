var React = require('react');
window.$ = window.jQuery = require('jquery');

var Paginator = React.createClass({displayName: "Paginator",

  getInitialState: function () {
    return {pageSize: this.props.pageSize};
  },

  componentWillReceiveProps: function (nextProps) {
    this.setState({pageSize: nextProps.pageSize});
  },

  handleChange: function (ev) {
    this.setState({pageSize: ev.target.value});
  },

  componentDidMount: function () {
    $(this.refs.pageSizeSelector.getDOMNode()).on('changed.fu.combobox', function (ev, opt) {
      this.props.onPageSizeChange(opt.value || opt.text);
    }.bind(this));
  },

  first: function (event) {
    event.preventDefault();
    this.props.onPageChange('first');
  },

  previous: function (event) {
    event.preventDefault();
    this.props.onPageChange('prev');
  },

  next: function (event) {
    event.preventDefault();
    this.props.onPageChange('next');
  },

  last: function (event) {
    event.preventDefault();
    this.props.onPageChange('last');
  },

  render: function () {
    var firstClassNames = 'first';
    var prevClassNames = 'prev';
    var lastClassNames = 'last';
    var nextClassNames = 'next';
    var page = this.props.page;
    var pageSize = this.props.pageSize;
    var totalEntries = this.props.totalEntries;
    var totalPages = parseInt(totalEntries / pageSize, 10) || 1;
    var isFirst, isLast = false;
    if (totalPages * pageSize < totalEntries) {
      totalPages += 1;
    }
    if (page === 1) {
      isFirst = true;
      firstClassNames += ' disabled';
      prevClassNames += ' disabled';
    }
    if (page === totalPages) {
      isLast = true;
      lastClassNames += ' disabled';
      nextClassNames += ' disabled';
    }
    var start = (page - 1) * pageSize + 1;
    var end = start + Math.min(pageSize, totalEntries) - 1;

    return (
      React.createElement("ul", {className: "pagination pagination-small"}, 
        React.createElement("li", {className: firstClassNames}, 
          isFirst ? React.createElement("a", {href: "#"}, "First") : React.createElement("a", {href: "#", onClick: this.first}, "First")
        ), 
        React.createElement("li", {className: prevClassNames}, 
          isFirst ? React.createElement("a", {href: "#"}, "« Previous") : React.createElement("a", {href: "#", onClick: this.previous}, "« Previous")
        ), 
        React.createElement("li", {className: "current"}, 
          React.createElement("div", {className: "page-size-selector"}, 
            React.createElement("span", null, start, " to ", end, " of ", this.props.totalEntries, " | items/page:"), 
            React.createElement("div", {className: "input-group input-append dropdown combobox", "data-initialize": "combobox", ref: "pageSizeSelector"}, 
              React.createElement("input", {type: "text", className: "form-control", value: this.state.pageSize, onChange: this.handleChange}), 
              React.createElement("div", {className: "input-group-btn"}, 
                React.createElement("button", {type: "button", className: "btn btn-default dropdown-toggle", "data-toggle": "dropdown"}, React.createElement("span", {className: "caret"})), 
                React.createElement("ul", {className: "dropdown-menu dropdown-menu-right"}, 
                  React.createElement("li", {"data-value": "10"}, React.createElement("a", {href: "#"}, "10")), 
                  React.createElement("li", {"data-value": "50"}, React.createElement("a", {href: "#"}, "50")), 
                  React.createElement("li", {"data-value": "100"}, React.createElement("a", {href: "#"}, "100")), 
                  React.createElement("li", {"data-value": "500"}, React.createElement("a", {href: "#"}, "500"))
                )
              )
            )
          )
        ), 
        React.createElement("li", {className: nextClassNames}, 
          isLast ? React.createElement("a", {href: "#"}, "Next »") : React.createElement("a", {href: "#", onClick: this.next}, "Next »")
        ), 
        React.createElement("li", {className: lastClassNames}, 
          isLast ? React.createElement("a", {href: "#"}, "Last") : React.createElement("a", {href: "#", onClick: this.last}, "Last")
        )
      )
    );
  }
});

module.exports = Paginator;